from __future__ import absolute_import
from __future__ import print_function
from __future__ import division

import tensorflow as tf
import numpy as np

from tensorflow.examples.tutorials.mnist import input_data

import sys
import os
import time

import infogan_model as infogan

sys.path.append('../')
import image_utils as iu

results = {
    'output': './gen_img/',
    'checkpoint': './model/checkpoint',
    'model': './model/InfoGAN-model.ckpt'
}

def main():

    mnist = input_data.read_data_sets('../data/MNIST_data', one_hot=True)

    # GPU configure
    config = tf.ConfigProto()
    config.gpu_options.allow_growth = True

    with tf.Session(config=config) as s:

        # GAN Model
        model = infogan.InfoGAN(s, is_train=False)

        s.run(tf.global_variables_initializer())

        saver = tf.train.Saver()

        ckpt = tf.train.get_checkpoint_state('./model/')
        if ckpt and ckpt.model_checkpoint_path:
            ckpt_name = os.path.basename(ckpt.model_checkpoint_path)
            saver.restore(s, os.path.join('./model/', ckpt_name))
        else:
            print("Cannot restore checkpoint!")
            return False

       
        sample_z = np.random.uniform(-1., 1., [model.sample_num, model.z_dim]).astype(np.float32)

        # Create conditional one-hot vector, with index 5 = 1
        sample_ccat = np.zeros(shape=[model.sample_num, model.n_cat])
        sample_ccat[:, 5] = 1
        sample_ccont = np.random.uniform(-1., 1., [model.sample_num, model.n_cont])
        sample_c  = np.concatenate((sample_ccat, sample_ccont), axis=1)

        print(sample_c[0] )

        sample_x, _ = mnist.train.next_batch(model.sample_num)
        sample_x = np.reshape(sample_x,[-1,model.input_height,model.input_width,model.input_channel])

        samples = s.run(model.g,feed_dict={model.x: sample_x,model.z: sample_z,model.c: sample_c})

        samples = np.reshape(samples, [-1, model.output_height, model.output_width, model.input_channel])

        # Export image generated by model G
        sample_image_height = model.sample_size
        sample_image_width = model.sample_size
        sample_dir = results['output'] + 'test.png'

        # Generated image save
        iu.save_images(samples,size=[sample_image_height, sample_image_width],image_path=sample_dir)


    # Close tf.Session
    s.close()


if __name__ == '__main__':
    main()
