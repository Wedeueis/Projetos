from __future__ import absolute_import
from __future__ import print_function
from __future__ import division

import tensorflow as tf
import numpy as np

from tensorflow.examples.tutorials.mnist import input_data

import sys
import time

import gan_model as gan

sys.path.append('../')
import image_utils as iu

results = {
    'output': './gen_img/',
    'checkpoint': './model/checkpoint',
    'model': './model/GAN-model.ckpt'
}

def main():
    start_time = time.time()  # Clocking start

    mnist = input_data.read_data_sets('../data/MNIST_data', one_hot=True)

    # GPU configure
    config = tf.ConfigProto()
    config.gpu_options.allow_growth = True

    with tf.Session(config=config) as s:
        # GAN Model
        model = gan.GAN(s)

        sample_z = np.random.uniform(-1., 1., [model.batch_size, model.z_dim]).astype(np.float32)
        
		sample_x, _ = mnist.train.next_batch(model.sample_num)

        samples = s.run(model.g,feed_dict={model.x: sample_x,model.z: sample_z,})

        samples = np.reshape(samples, [-1, model.output_height, model.output_width, model.channel])

        # Summary saver
        model.writer.add_summary(summary, step)

        # Export image generated by model G
        sample_image_height = model.sample_size
        sample_image_width = model.sample_size
        sample_dir = results['output'] + 'test_{:08d}.png'.format(step)

        # Generated image save
        iu.save_images(samples,size=[sample_image_height, sample_image_width],image_path=sample_dir)

        # Model save
        model.saver.save(s, results['model'], global_step=step)
        
	# Close tf.Session
	s.close()


if __name__ == '__main__':
    main()
