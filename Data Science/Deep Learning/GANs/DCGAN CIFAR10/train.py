from __future__ import absolute_import
from __future__ import print_function
from __future__ import division

import numpy as np
import tensorflow as tf

import sys
import time

from dataset import Dataset, DataIterator
import model as prog_gan
import image_utils as iu

results = {
    'output': './gen_img/',
    'checkpoint': './model/checkpoint',
    'model': './model/InfoGAN-model.ckpt'
}

train_step = {
    'epoch': 10,
    'logging_interval': 500,
}

def main():
    start_time = time.time()  # Clocking start

    # GPU configure
    config = tf.ConfigProto()
    config.gpu_options.allow_growth = True

    with tf.Session(config=config) as s:
        # DCGAN Model
        model = prog_gan.ProgGAN(s)
        # Dataset load
        dataset = Dataset("../data/CIFAR10_data/")
        dataset_iter = DataIterator(dataset.train_images, dataset.train_labels, model.batch_size)

        # Initializing
        s.run(tf.global_variables_initializer())

        sample_x = dataset.valid_images[:model.sample_num].astype(np.float32) / 255.0
        sample_z = np.random.uniform(-1., 1., [model.sample_num, model.z_dim]).astype(np.float32)

        d_overpowered = False

        step = 0
        for epoch in range(train_step['epoch']):
            for batch_images, _ in dataset_iter.iterate():
                batch_x = batch_images.astype(np.float32) / 255.0
                batch_z = np.random.uniform(-1., 1., [model.batch_size, model.z_dim]).astype(np.float32)

                # Update D network
                if not d_overpowered:
                    _, d_loss = s.run([model.d_op, model.d_loss], feed_dict={model.x: batch_x,model.z: batch_z,})

                # Update G network
                _, g_loss = s.run([model.g_op, model.g_loss], feed_dict={ model.x: batch_x,model.z: batch_z,})

                d_overpowered = d_loss < g_loss / 2

                # Logging
                if step % train_step['logging_interval'] == 0:
                    batch_x = dataset.valid_images[:model.batch_size].astype(np.float32) / 255.0
                    batch_z = np.random.uniform(-1., 1., [model.batch_size, model.z_dim]).astype(np.float32)

                    d_loss, g_loss, summary = s.run([model.d_loss, model.g_loss, model.merged],
                                                    feed_dict={model.x: batch_x,model.z: batch_z,})

                    d_overpowered = d_loss < g_loss / 2

                    # Print loss
                    print("[+] Step %08d => " % step,
                        "Dloss: {:.8f}".format(d_loss),
                        "Gloss: {:.8f}".format(g_loss))

                    # Training G model with sample image and noise
                    samples = s.run(model.g, feed_dict={model.x: sample_x,model.z: sample_z,})

                    # Summary saver
                    model.writer.add_summary(summary, step)

                    # Export image generated by model G
                    sample_image_height = model.sample_size
                    sample_image_width = model.sample_size
                    sample_dir = results['output'] + 'train_{:08d}.png'.format(step)

                    # Generated image save
                    iu.save_images(samples,
                                size=[sample_image_height, sample_image_width],
                                image_path=sample_dir)

                    # Model save
                    model.saver.save(s, results['model'], global_step=step)
                
                step += 1                                                   

    end_time = time.time() - start_time  # Clocking end

    # Elapsed time
    print("[+] Elapsed time {:.8f}s".format(end_time))

    # Close tf.Session
    s.close()


if __name__ == '__main__':
    main()