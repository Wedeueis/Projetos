from __future__ import absolute_import
from __future__ import print_function
from __future__ import division

import numpy as np
import tensorflow as tf

import sys
import time

from dataset import Dataset, DataIterator
from tensorflow.examples.tutorials.mnist import input_data
import model as prog_gan
import image_utils as iu


results = {
    'output': './gen_img/',
    'checkpoint': './model/checkpoint',
    'model': './model/InfoGAN-model.ckpt'
}

train_step = {
    'global_step': 2001,
    'logging_interval': 250,
}

def image_sampling(img, sampling_type='down'):
    shape = img.get_shape()  # [batch, height, width, channels]

    if sampling_type == 'down':
        h = int(shape[1] // 4)
        w = int(shape[2] // 4)
    else:  # 'up'
        h = int(shape[1] * 4)
        w = int(shape[2] * 4)

    return tf.image.resize_images(img, [h, w], tf.image.ResizeMethod.BILINEAR)

def main():
    start_time = time.time()  # Clocking start

    # GPU configure
    config = tf.ConfigProto()
    config.gpu_options.allow_growth = True

    with tf.Session(config=config) as s:
        # DCGAN Model
        model = prog_gan.ProgGAN(s)

        mnist = input_data.read_data_sets('../data/MNIST_data', one_hot=True)

        # Initializing
        s.run(tf.global_variables_initializer())

        sample_x, _ = mnist.test.next_batch(model.sample_num)
        sample_x = np.reshape(sample_x, [-1] + model.image_shape[1:])

        sample_z = np.random.uniform(-1., 1., [model.sample_num, model.z_dim]).astype(np.float32)

        d_overpowered = False

        for step in range(train_step['global_step']):
            batch_x, _ = mnist.train.next_batch(model.batch_size)
            batch_x = np.reshape(batch_x, [-1] + model.image_shape[1:])
            batch_x = batch_x*2 - 1
            batch_z = np.random.uniform(-1., 1., [model.batch_size, model.z_dim]).astype(np.float32)

            # Update D network
            if not d_overpowered:
                if model.second_layer:
                    _, d_loss = s.run([model.d_op2, model.d_loss2], feed_dict={model.x2: batch_x, model.z: batch_z,})
                else:
                    _, d_loss = s.run([model.d_op1, model.d_loss1], feed_dict={model.x2: batch_x, model.z: batch_z,})

            # Update G network
            if model.second_layer:
                _, g_loss = s.run([model.g_op2, model.g_loss2], feed_dict={ model.x2: batch_x, model.z: batch_z,})
            else:
                _, g_loss = s.run([model.g_op1, model.g_loss1], feed_dict={ model.x2: batch_x, model.z: batch_z,})

            d_overpowered = d_loss < g_loss / 2

            if step > train_step['global_step']/2 and not model.second_layer:
                model.second_layer = True
                print("Added second layer")

            # Logging
            if step % train_step['logging_interval'] == 0:
                batch_x, _ = mnist.train.next_batch(model.batch_size)
                batch_x = np.reshape(batch_x, [-1] + model.image_shape[1:])
                batch_x = batch_x*2 - 1
                batch_z = np.random.uniform(-1., 1., [model.batch_size, model.z_dim]).astype(np.float32)

                
                if model.second_layer:
                    d_loss, g_loss, summary = s.run([model.d_loss2, model.g_loss2, model.merged],
                                                feed_dict={ model.x2: batch_x, model.z: batch_z,})
                else:
                    d_loss, g_loss, summary = s.run([model.d_loss1, model.g_loss1, model.merged],
                                                feed_dict={ model.x2: batch_x, model.z: batch_z,})

                d_overpowered = d_loss < g_loss / 2

                # Print loss
                print("[+] Step %08d => " % step,
                    "Dloss: {:.8f}".format(d_loss),
                    "Gloss: {:.8f}".format(g_loss))

                # Training G model with sample image and noise
                if model.second_layer:
                    samples = s.run(model.g2, feed_dict={model.x2: sample_x,model.z: sample_z,})
                else:
                    samples = s.run(model.g1, feed_dict={model.x2: sample_x,model.z: sample_z,})
                
                # Summary saver
                model.writer.add_summary(summary, step)

                # Export image generated by model G
                sample_image_height = model.sample_size
                sample_image_width = model.sample_size
                sample_dir = results['output'] + 'train_{:08d}.png'.format(step)

                # Generated image save
                iu.save_images(samples,
                            size=[sample_image_height, sample_image_width],
                            image_path=sample_dir)

                # Model save
                model.saver.save(s, results['model'], global_step=step)

    end_time = time.time() - start_time  # Clocking end

    # Elapsed time
    print("[+] Elapsed time {:.8f}s".format(end_time))

    # Close tf.Session
    s.close()


if __name__ == '__main__':
    main()