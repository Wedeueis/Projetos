Tokens
	AND;
	ARITH_OPL;
	ARITH_OPR;
	ASSIGN_OP;
	AUGASSIGN_OP;
	BREAK;
	COLON;
	COMMA;
	COMP_OP;
	CONTINUE;
	DEDENT;
	DEF;
	DEL;
	DOT;
	ELIF;
	ELSE;
	FALSE;
	FOR;
	FROM;
	GLOBAL;
	IF;
	IN;
	INDENT;
	LBKT;
	LPAR;
	NAME;
	NEWLINE;
	NONE;
	NONLOCAL;
	NOT;
	NUMBER;
	OR;
	PASS;
	POW;
	RBKT;
	RETURN;
	RPAR;
	SEMICOLON;
	TRUE;
	WHILE;
	YIELD;


Regras
begin S -> stmt | NEWLINE | stmt S | NEWLINE S;
stmt -> simple_stmt | compound_stmt;
simple_stmt -> small_stmt NEWLINE | small_stmt SEMICOLON simple_stmt NEWLINE | small_stmt SEMICOLON NEWLINE;
small_stmt -> expr_stmt | DEL exprlist | PASS | flow_stmt | GLOBAL name_stmt | NONLOCAL name_stmt;
expr_stmt -> testlist | testlist AUGASSIGN_OP yield_expr | testlist AUGASSIGN_OP testlist | testlist compound_args;
compound_args -> ASSIGN_OP yield_expr | ASSIGN_OP yield_expr compound_args | ASSIGN_OP testlist | ASSIGN_OP testlist compound_args;
flow_stmt -> BREAK | CONTINUE | RETURN | RETURN testlist | yield_expr;
name_stmt -> NAME | NAME COMMA name_stmt;
compound_stmt -> cond_stmt | for_stmt | funcdef;
funcdef -> DEF NAME parameters COLON suite;
parameters -> LPAR RPAR | LPAR varargslist RPAR;
varargslist -> fpdef | fpdef ASSIGN_OP test | fpdef COMMA varargslist | fpdef ASSIGN_OP test COMMA varargslist;
fpdef -> NAME | LPAR fplist RPAR;
fplist -> fpdef | fpdef COMMA fplist;
cond_stmt -> if_stmt | if_stmt elif_stmt | if_stmt elif_stmt else_stmt | if_stmt else_stmt | while_stmt;
if_stmt -> IF test COLON suite;
elif_stmt -> ELIF test  COLON suite | ELIF test COLON suite elif_stmt;
else_stmt -> ELSE COLON suite;
while_stmt -> WHILE test COLON suite | WHILE test COLON suite else_stmt;
for_stmt -> FOR exprlist IN testlist COLON suite | FOR exprlist IN testlist COLON suite else_stmt;
suite -> simple_stmt | NEWLINE INDENT suite_stmt DEDENT;
suite_stmt -> stmt | stmt suite_stmt;
test -> or_test | or_test IF or_test ELSE test;
or_test -> and_test | and_test OR or_test;
and_test -> not_test | not_test AND and_test;
not_test -> NOT not_test | comparison;
comparison -> arith_expr | arith_expr COMP_OP comparison;
arith_expr -> term | term ARITH_OPR arith_expr;
term -> factor | factor ARITH_OPL term;
factor -> ARITH_OPR factor | power;
power -> atom_expr | atom_expr POW factor;
atom_expr -> atom | atom compound_trailer;
atom -> LPAR RPAR |  LPAR yield_expr RPAR | LPAR compound_test RPAR | LBKT RBKT | LBKT compound_test RBKT | NAME | NUMBER| NONE | TRUE | FALSE;
compound_test -> test | test COMMA compound_test;
compound_trailer -> trailer | trailer compound_trailer;
trailer -> LPAR RPAR | LPAR arglist RPAR | LBKT compound_test RBKT | DOT NAME;
exprlist -> arith_expr | arith_expr COMMA compound_expr;
compound_expr -> arith_expr | arith_expr COMMA compound_expr;
testlist -> test | test COMMA compound_test;
arglist -> argument | argument COMMA compound_arg;
compound_arg -> argument | argument COMMA compound_arg;
argument -> test | test ASSIGN_OP test | POW test;
yield_expr -> YIELD | YIELD yield_arg;
yield_arg -> FROM test | testlist;
